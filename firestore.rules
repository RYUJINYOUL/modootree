rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // 기본 함수
    function isAuthenticated() {
      return request.auth != null;
    }

    // admin 컬렉션 위에 추가
    match /usernames/{username} {
      allow read: if true;  // 메타데이터를 위해 필요
      allow write: if isAuthenticated();
    }

    // admin 컬렉션은 특별 관리
    match /admin/{document} {
      allow read: if isAuthenticated();
      allow write: if false;  // admin 문서는 콘솔에서만 수정 가능
    }

    // votes 컬렉션에 대한 규칙
    match /votes/{document} {
      allow read: if true;  // 모든 사용자가 읽기 가능
      allow create: if isAuthenticated();  // 로그인한 사용자만 생성 가능
      allow update: if 
        // 작성자 본인이거나
        (isAuthenticated() && resource.data.createdBy == request.auth.uid) ||
        // 비밀번호가 없는 투표는 자유롭게 투표 가능
        (!resource.data.isPasswordProtected && 
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['options'])) ||
        // 비밀번호가 있는 투표는 비밀번호 확인 필요
        (resource.data.isPasswordProtected && 
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['options']) && 
         request.resource.data.password == resource.data.password);
      allow delete: if isAuthenticated() && resource.data.createdBy == request.auth.uid;  // 작성자만 삭제 가능
    }

    // users 컬렉션 - 모든 users 관련 규칙을 여기 하나로 통합
    match /users/{userId} {
      // 문서 자체에 대한 규칙
      allow read: if true;
      allow write: if isAuthenticated() && userId == request.auth.uid;

      // AI 상담 관련 컬렉션 (추가)
      match /aiComfort/{document=**} {
        allow read, write: if isAuthenticated() && request.auth.uid == userId;
      }

      // metadata 설정
      match /settings/metadata {
        allow read: if true;
        allow write: if isAuthenticated() && userId == request.auth.uid;
      }

      // 게시판(posts) 컬렉션에 대한 규칙
      match /posts/{postId} {
        allow read: if true;  // 모든 사용자가 읽기 가능
        allow create: if isAuthenticated();  // 로그인한 사용자는 누구나 글 작성 가능
        allow update, delete: if isAuthenticated() && (
          resource.data.author.uid == request.auth.uid ||  // 글 작성자
          userId == request.auth.uid ||  // 페이지 소유자
          exists(/databases/$(database)/documents/users/$(userId)/settings/permissions) &&
          get(/databases/$(database)/documents/users/$(userId)/settings/permissions).data.allowedUsers.hasAny([{'email': request.auth.token.email}])  // 권한 있는 사용자
        );

        // 댓글 컬렉션에 대한 규칙
        match /comments/{commentId} {
          allow read: if true;
          allow create: if isAuthenticated();  // 로그인한 사용자는 누구나 댓글 작성 가능
          allow update, delete: if isAuthenticated() && (
            resource.data.author.uid == request.auth.uid ||  // 댓글 작성자
            userId == request.auth.uid  // 페이지 소유자
          );
        }
      }

      // 방명록(comments) 컬렉션에 대한 규칙
      match /comments/{commentId} {
        allow read: if true;  // 모든 사용자가 읽기 가능
        allow create: if true;  // 모든 사용자가 작성 가능
        allow update, delete: if isAuthenticated() && 
          (resource.data.uid == request.auth.uid ||  // 작성자 본인
           userId == request.auth.uid);  // 페이지 소유자
      }

      // 다이어리 컬렉션에 대한 규칙
      match /diary/{diaryId} {
        allow read: if true;  // 모든 사용자가 읽기 가능
        allow create: if isAuthenticated();  // 로그인한 사용자만 생성 가능
        allow update, delete: if isAuthenticated() && (
          resource.data.authorUid == request.auth.uid ||  // 작성자 본인
          userId == request.auth.uid ||  // 페이지 소유자
          // 허용된 사용자 확인
          exists(/databases/$(database)/documents/users/$(userId)/settings/permissions) &&
          get(/databases/$(database)/documents/users/$(userId)/settings/permissions).data.allowedUsers.hasAny([{'email': request.auth.token.email}])
        );
      }

      // 다이어리 설정에 대한 규칙
      match /settings/diary {
        allow read: if true;
        allow write: if isAuthenticated() && userId == request.auth.uid;
      }

      // 캘린더 구독 설정에 대한 규칙
      match /settings/subscribers {
        allow read: if true;
        // 모든 사용자가 구독 가능
        allow create, update: if true;  // 구독 추가/수정 모두 허용
      }

      // 캘린더 이벤트에 대한 규칙
      match /event/{eventId} {
        allow read: if true;
        
        // 이벤트 생성 권한
        allow create: if isAuthenticated() && (
          request.auth.uid == userId ||
          exists(/databases/$(database)/documents/users/$(userId)/settings/permissions) &&
          get(/databases/$(database)/documents/users/$(userId)/settings/permissions).data.allowedUsers.hasAny([{'email': request.auth.token.email}])
        );

        // 이벤트 수정 권한
        allow update: if isAuthenticated() && (
          // 페이지 소유자이거나
          request.auth.uid == userId ||
          // 허용된 사용자이거나
          exists(/databases/$(database)/documents/users/$(userId)/settings/permissions) &&
          get(/databases/$(database)/documents/users/$(userId)/settings/permissions).data.allowedUsers.hasAny([{'email': request.auth.token.email}]) ||
          // 답글만 추가하는 경우 로그인한 모든 사용자 허용
          (
            request.resource.data.diff(resource.data).affectedKeys().hasOnly(['replies']) &&
            request.resource.data.replies.size() > resource.data.replies.size()
          )
        );

        // 이벤트 삭제 권한
        allow delete: if isAuthenticated() && request.auth.uid == userId;
      }

      // 게시판 카테고리 설정에 대한 규칙
      match /settings/boardCategories {
        allow read: if true;  // 모든 사용자가 카테고리 목록 읽기 가능
        allow write: if isAuthenticated() && (
          userId == request.auth.uid ||  // 페이지 소유자
          exists(/databases/$(database)/documents/users/$(userId)/settings/permissions) &&
          get(/databases/$(database)/documents/users/$(userId)/settings/permissions).data.allowedUsers.hasAny([{'email': request.auth.token.email}])
        );
      }
    }

    // 나머지 모든 컬렉션에 대한 기본 규칙
    match /{document=**} {
      allow read: if true;  // 모든 문서 읽기 허용
      allow write: if isAuthenticated();  // 로그인한 사용자만 쓰기 가능
    }
  }
}