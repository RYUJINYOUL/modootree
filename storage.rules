rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    // 기본 함수
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isImageFile() {
      return request.resource.contentType.matches('image/.*');
    }

    function hasPermission(userId) {
      return isAuthenticated() && (
        isOwner(userId) ||
        exists(/databases/$(database)/documents/users/$(userId)/settings/permissions) &&
        get(/databases/$(database)/documents/users/$(userId)/settings/permissions).data.allowedUsers.hasAny([{'email': request.auth.token.email}])
      );
    }

    // 정적 리소스 규칙 수정 (대소문자 모두 허용, 삭제 권한 추가)
    match /Image/{allPaths=**} {
      allow read, delete: if true;
    }
    match /image/{allPaths=**} {
      allow read, delete: if true;
    }

    // 사용자별 데이터
    match /{userId}/{category}/{fileName} {
      allow read: if true;
      allow write: if hasPermission(userId) && isImageFile();
    }

    // 공유 데이터 (예: 공감 한 조각)
    match /likes/{userId}/{fileName} {
      allow read: if true;
      allow write: if isAuthenticated() && isOwner(userId) && isImageFile();
    }

    // 다이어리 이미지
    match /diary/{userId}/{fileName} {
      allow read: if true;
      allow write: if hasPermission(userId) && isImageFile();
    }

    // 게시판 이미지
    match /board/{userId}/{fileName} {
      allow read: if true;
      allow write: if hasPermission(userId) && isImageFile();
    }

    // AI 아트워크
    match /artifacts/{appId}/users/{userId}/{fileName} {
      allow read: if true;
      allow write: if isAuthenticated() && isOwner(userId) && isImageFile();
    }

    // 포토 스토리 이미지
    match /photo-stories/{userId}/{fileName} {
      allow read: if true;
      allow write, delete: if isAuthenticated() && isOwner(userId);
    }

    // 기본 규칙 (Firestore와 동일)
    match /{allPaths=**} {
      allow read: if true;
      allow write: if isAuthenticated() && isImageFile();
    }
  }
}